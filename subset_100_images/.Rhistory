DataMort
# TBM
DataMort$TBM <- 100*DataMort$Defuncions / DataMort$PT
DataMort
# Dataframe amb esperança de vida
DateE0 <- data.frame(Paisos = c("EUA", "Japó", "Suècia"), e0 = c(80.96, 86.04, 83.12))
DateE0
merge(DataMort, DateE0)
# per mantenir frança:
merge(DataMort, DateE0, all.x = TRUE)
merge(DataMort, DateE0, all.x = TRUE, by = 1)
# per mantenir frança:
merge(DataMort, DateE0, all.x = TRUE)
merge(DataMort, DateE0, all.x = TRUE, by = 1)
# guardar dataframe en un arxiu csv
write.csv(DataMort, file = "MortalitatPaisos.csv")
addicts <- read.table("addicts.txt",head=TRUE)
attach(addicts)
n.var2 <- names(addicts)
library(knitr)
kable(data.frame(Variables= n.var2[c(4,3,2,5,6)], Descripció= c("Temps en dies fins l'abandonament de la clínica","Indicador de censura (1:dada obs ervada; 0:dada censurada)","Clínica (1 o 2)","Estada prèvia a la presó (1 :si; 0:no)","Dosi màxima de metadona (mg/dia)")))
library(survival)
add <- Surv(survt,status)
print(add)
add.clinic <- survfit(add~clinic)
add.clinic
# summary(add.clinic)
## 2 maneres
# 1.
plot(add.clinic,xlab="Temps en dies",ylab="Supervivència",lty=c(1,3))
legend(25,0.3,c("Clínica 1","Clínica 2"),lty=c(1,3))
title("Funcions de Supervivència per clínica")
# 2.
library(survminer)
ggsurvplot(add.clinic, data=addicts,conf.int=T,xlab="Temps en dies",ylab= "Supervivència", legend.labs=c("Clínica 1","Clínica 2"),title="Funcions d e Supervivència per clínica",xlim=c(0,max(addicts$survt)))
add.prison <- survfit(add~prison)
add.prison
ggsurvplot(add.prison, data=addicts,conf.int=T,xlab="Temps en dies",ylab= "Supervivència", legend.labs=c("No","Sí"),title="Funcions de Supervivènci a per estada prèvia a la presó",xlim=c(0,max(addicts$survt)))
# 1. Grup clinic=1
clinic1 <- subset(addicts,addicts$clinic==1)
add1 <- Surv(clinic1$survt,clinic1$status)
add1.prison <- survfit(add1~clinic1$prison,data=clinic1)
# 2. Grup clinic=2
clinic2 <- subset(addicts,addicts$clinic==2)
add2 <- Surv(clinic2$survt,clinic2$status)
add2.prison <- survfit(add2~clinic2$prison,data=clinic2)
par(mfrow=c(1,2))
ggsurvplot(add1.prison, data=clinic1,conf.int=T,xlab="Temps en dies",ylab ="Supervivència", legend.labs=c("No","Sí"),title="Funcions de Supervivència per prison, clínica 1")
ggsurvplot(add2.prison, data=clinic2,conf.int=T,xlab="Temps en dies",ylab ="Supervivència", legend.labs=c("No","Sí"),title="Funcions de Supervivència per prison, clínica 2",xlim=c(0,max(clinic2$survt)))
# 1. Grup prison=0 (no presó)
prison0 <- subset(addicts,addicts$prison==0)
add.p0 <- Surv(prison0$survt,prison0$status)
add.p0.clinic <- survfit(add.p0~prison0$clinic,data=prison0)
# 2. Grup prison=1 (sí presó)
prison1 <- subset(addicts,addicts$prison==1)
add.p1 <- Surv(prison1$survt,prison1$status)
add.p1.clinic <- survfit(add.p1~prison1$clinic,data=prison1)
par(mfrow=c(1,2))
ggsurvplot(add.p0.clinic, data=prison0,conf.int=T,xlab="Temps en dies",ylab="Supervivència", legend.labs=c("Clínica 1","Clínica 2"),title="Funcions de Supervivència per clínica, presó NO")
ggsurvplot(add.p1.clinic, data=prison1,conf.int=T,xlab="Temps en dies",ylab="Supervivència", legend.labs=c("Clínica 1","Clínica 2"),title="Funcions de Supervivència per clínica, presó SI", xlim=c(0,max(prison1$survt)))
# 1. Grup prison=0 (no presó)
prison0 <- subset(addicts,addicts$prison==0)
add.p0 <- Surv(prison0$survt,prison0$status)
add.p0.clinic <- survfit(add.p0~prison0$clinic,data=prison0)
# 2. Grup prison=1 (sí presó)
prison1 <- subset(addicts,addicts$prison==1)
add.p1 <- Surv(prison1$survt,prison1$status)
add.p1.clinic <- survfit(add.p1~prison1$clinic,data=prison1)
par(mfrow=c(1,2))
ggsurvplot(add.p0.clinic, data=prison0,conf.int=T,xlab="Temps en dies",ylab="Supervivència", legend.labs=c("Clínica 1","Clínica 2"),title="Funcions de Supervivència per clínica, presó NO")
ggsurvplot(add.p1.clinic, data=prison1,conf.int=T,xlab="Temps en dies",ylab="Supervivència", legend.labs=c("Clínica 1","Clínica 2"),title="Funcions de Supervivència per clínica, presó SI", xlim=c(0,max(prison1$survt)))
addicts$fdose[dose<60]<-1
addicts$fdose[dose<79&dose>59]<-2
addicts$fdose[dose>79]<-3
table(addicts$fdose)
add.fdose <- survfit(add~addicts$fdose)
add.fdose
65/93
71/104
14/41
## 2 maneres:
# 1.
plot(add.fdose,xlab="Temps en dies",ylab="Supervivència",lty=c(1,2,3))
legend(900,0.9,c("Baix","Mitjà","Alt"),lty=c(1,2,3))
title("Funcions de Supervivència per nivell de metadona")
# 2.
ggsurvplot(add.fdose, data=addicts,conf.int=T,xlab="Temps en dies",ylab=" Supervivència", legend.labs=c("Baix","Mitjà","Alt"),title="Funcions de Su
pervivència per nivell de metadona",xlim=c(0,max(addicts$survt)))
addicts$fdose2[dose<79]<-1
addicts$fdose2[dose>79]<-2
table(addicts$fdose2)
add.fdose2 <- survfit(add~addicts$fdose2)
add.fdose2
ggsurvplot(add.fdose2, data=addicts,conf.int=T,xlab="Temps en dies",ylab= "Supervivència", legend.labs=c("Baix","Alt"),title="Funcions de Supervivè ncia per nivell de metadona",xlim=c(0,max(addicts$survt)))
# 1. Grup clinic=1
clinic1 <- subset(addicts,addicts$clinic==1)
add1 <- Surv(clinic1$survt,clinic1$status)
add1.fdose2 <- survfit(add1~clinic1$fdose2,data=clinic1)
# 2. Grup clinic=2
clinic2 <- subset(addicts,addicts$clinic==2)
add2 <- Surv(clinic2$survt,clinic2$status)
add2.fdose2 <- survfit(add2~clinic2$fdose2,data=clinic2)
# 1. Grup clinic=1
clinic1 <- subset(addicts,addicts$clinic==1)
add1 <- Surv(clinic1$survt,clinic1$status)
add1.fdose2 <- survfit(add1~clinic1$fdose2,data=clinic1)
# 2. Grup clinic=2
clinic2 <- subset(addicts,addicts$clinic==2)
add2 <- Surv(clinic2$survt,clinic2$status)
add2.fdose2 <- survfit(add2~clinic2$fdose2,data=clinic2)
par(mfrow=c(1,2))
ggsurvplot(add1.fdose2, data=clinic1,conf.int=T,xlab="Temps en dies",ylab ="Supervivència", legend.labs=c("Baix","Alt"),title="Funcions de Supervivència per dose, clínica 1")
ggsurvplot(add2.fdose2, data=clinic2,conf.int=T,xlab="Temps en dies",ylab ="Supervivència", legend.labs=c("Baix","Alt"),title="Funcions de Supervivència per dose, clínica 2",xlim=c(0,max(clinic2$survt)))
# 1. Grup dosi baixa
dose1 <- subset(addicts,addicts$fdose2==1)
add.d1 <- Surv(dose1$survt,dose1$status)
add.d1.clinic <- survfit(add.d1~dose1$clinic,data=dose1)
# 2. Grup dosi alta
dose2 <- subset(addicts,addicts$fdose2==2)
add.d2 <- Surv(dose2$survt,dose2$status)
add.d2.clinic <- survfit(add.d2~dose2$clinic,data=dose2)
par(mfrow=c(1,2))
ggsurvplot(add.d1.clinic, data=dose1,conf.int=T,xlab="Temps en dies",ylab ="Supervivència", legend.labs=c("Clínica 1","Clínica 2"),title="Funcions de Supervivència per clínica, dosis Baix")
ggsurvplot(add.d2.clinic, data=dose2,conf.int=T,xlab="Temps en dies",ylab ="Supervivència", legend.labs=c("Clínica 1","Clínica 2"),title="Funcions de Supervivència per clínica, dosis Alt",xlim=c(0,max(dose2$survt)))
View(addicts)
tab <- table(addicts$clinic,addicts$prison)
tab
tab <- table(addicts$clinic,addicts$prison)
colnames(tab) <- c("No presó","Sí presó")
rownames(tab) <- c("Clínica 1","Clínica 2")
addmargins(tab)
tab <- table(addicts$clinic,addicts$prison)
colnames(tab) <- c("No presó","Sí presó")
rownames(tab) <- c("Clínica 1","Clínica 2")
addmargins(tab)
tab <- table(addicts$clinic,addicts$fdose2)
colnames(tab) <- c("Dosi baixa","Dosi alta")
rownames(tab) <- c("Clínica 1","Clínica 2")
addmargins(tab)
test.clinic <- survdiff(add~addicts$clinic)
test.clinic
test.prison <- survdiff(add~addicts$prison)
test.prison
test.fdose <- survdiff(add~addicts$fdose)
test.fdose
survdiff(add~addicts$fdose,subset=(addicts$fdose <= 2))
survdiff(add~addicts$fdose,subset=(addicts$fdose >= 2))
survdiff(add~addicts$fdose,subset=(addicts$fdose != 2))
strata.prison <- survdiff(add~clinic+strata(addicts$prison))
strata.prison
test3.clinic <- survdiff(add~clinic+strata(addicts$fdose2))
test3.clinic
whas100 <- read.table("whas100.txt", head = TRUE)
attach(whas100)
library(survival)
mioc <- Surv(lenfol, fstat)    # agafem el temps de supervivència i l'indicador de censura
print(mioc)
mioc.gen <- survfit(mioc ~ gender)
# les 3 variables són, per defecte: survfit(mioc ~ gender, type="kaplan-meier",error="greenwood",conf.type="log")
# Descriptiva dels grups: nº de fallides, mediana, i IC 95% per la mediana
mioc.gen
# Estimació de la funció de supervivència per cada grup, amb IC 95%
summary(mioc.gen)
sup.grup2 <- survfit(sup ~ Linf)
mioc.age <- survfit(mioc ~ fage)
# Descriptiva dels grups: nº de fallides, mediana, i IC 95% per la mediana
mioc.age
# Estimació de la funció de supervivència per cada grup, amb IC 95%
summary(mioc.age)
fage_0 <- whas100[whas100$fage == 0, ]
fage_0    # 49/100 individus menors de 70 anys
fage_0_fstat_0 <- fage_0[fage_0$fstat == 0, ]
fage_0_fstat_0        # 33/49 individus menors de 70 anys censurats
(163+51)/83852
(163+51)/84015
(163+51)/84015 * 100
83801/84015
83801/84015 * 100
(13+6)/80658
(13+6)/80658 * 100
# Una altra manera: és 1- la probabilitat de l'apartat A
1-0.2547164
(163+51+18+7+7)/84015
(163+51+18+7+7)/84015 * 100
(13+7)/(((83801-18) + 80645)/2) * 100
(147+39+12+6)/(((77286+80645) + (71444+77235))/2) * 100
(12+6) / ((77247 + 77235)/2) * 100
# Per calcular PT[0,T]: agafem la població a meitat de termini: 77235
(12+6) / 77235 * 100
# Per calcular PT[0,T]: agafem la població a meitat de període: l'1.1.2013. La calculem
83801-17-7-7
(6+7) / (83801-17-7-7) * 100
# Per calcular PT[0,T]: agafem la població a meitat de període: l'1.1.2013. La calculem
(83801-17-7-7)
(39+12) / ((77286+77235)/2) * 100
(6+5) / ((80645+80645-6-5)/2) * 100
(163+51+18+7+7+6+4+3) / 84015
(163+51+18+7+7+6+4+3) / 84015 * 100
1-(0.3082783/100)
(80658 - (13+6+5+5)) / 80658 * 100
(83801-18-7-7-6-4-3) / 83801
(83801-18-7-7-6-4-3) / 84015 * 100
(1-0.3082783) * 100
(1-0.3082783) * 100
1-0.3082783
1-(0.3082783/100)
1-(0.3082783/100) * 100
(1-(0.3082783/100)) * 100
(80658 - (13+6+5+5)) / 80658 * 100
(83801-18-7-7-6-4-3) / 83801 * 100
library(tidyr)
library(tidyr)
library(viridis)
dat <- read.table("HMD-Mx_1x1-Spain.txt", skip = 2, header = TRUE)
dat <- dat[which(dat$Age %in% 0:100), ]
dat$Age <- as.numeric(dat$Age)
library(tidyr)
library(viridis)
dat <- read.table("HMD-Mx_1x1-Spain.txt", skip = 2, header = TRUE)
dat <- dat[which(dat$Age %in% 0:100), ]
dat$Age <- as.numeric(dat$Age)
dat <- dat[dat$Year %in% 1910:2020, ]
class(dat$Year)
rownames(dat) <- NULL
dat1 <- as.data.frame(pivot_wider(dat[,c("Year", "Age", "Total")], id_cols = "Age", values_from = "Total", names_from = c("Year")))
library(tidyr)
library(viridis)
dat <- read.table("HMD-Mx_1x1-Spain.txt", skip = 2, header = TRUE)
dat <- dat[which(dat$Age %in% 0:100), ]
dat$Age <- as.numeric(dat$Age)
dat <- dat[dat$Year %in% 1910:2020, ]
class(dat$Year)
rownames(dat) <- NULL
dat1 <- as.data.frame(pivot_wider(dat[,c("Year", "Age", "Total")], id_cols = "Age", values_from = "Total", names_from = c("Year")))
rownames(dat1) <- dat1$Age
dat1 <- as.matrix(dat1[,-1])
head(dat1)
library(tidyr)
library(viridis)
dat <- read.table("HMD-Mx_1x1-Spain.txt", skip = 2, header = TRUE)
dat <- dat[which(dat$Age %in% 0:100), ]
dat$Age <- as.numeric(dat$Age)
dat <- dat[dat$Year %in% 1910:2020, ]
class(dat$Year)
rownames(dat) <- NULL
dat$Total <- as.numeric(dat$Total)
dat1 <- as.data.frame(pivot_wider(dat[,c("Year", "Age", "Total")], id_cols = "Age", values_from = "Total", names_from = c("Year")))
dat1
rownames(dat1) <- dat1$Age
dat1 <- as.matrix(dat1[,-1])
head(dat1)
(80658 - (13+6+5+5)) / 80658 * 100
# Una altra manera: REPASSAR PQ NO DONA IGUAL
(80645-6-5-5)     # Supervivents de la cohort 2011 a edat 3
80658             # Supervivents de la cohort 2011 a edat 1
(80645-6-5-5)  / 80658 * 100
image(log(dat1))
image(t(log(dat1)))
# Cal transposar-ho, que sinó surt al revés el gràfic
image(t(log(dat1)), head = "Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic
image(t(log(dat1)), title("Taxes específiques de mortalitat, Espanya, 1910-2020"))
# Cal transposar-ho, que sinó surt al revés el gràfic
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12)
axis(1, at = seq(0, 1, length.out = 12))
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12))
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 10), labels = seq(0, 100, 10), cex = 0.9)
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.5)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.2)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
xaxis("Any")
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
xlabel("Any")
par(las = 1, mar = c(4,3,3,1))    # per a que les etiquetes dels eixos estiguin en horitzontal
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE)
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
par(las = 1, mar = c(4,3,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
par(las = 1, mar = c(4,3,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
title("Taxes específiques de mortalitat, Espanya, 1910-2020")
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database", side = 1, at = 0.12, line = 3, cex = 0.8)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database, https://mortality.org/", side = 1, at = 0.12, line = 3, cex = 0.8)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database, https://mortality.org/", side = 1, at = 0.5, line = 3, cex = 0.8)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database, https://mortality.org/", side = 1, at = 0.12, line = 4, cex = 0.8)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database, https://mortality.org/", side = 1, at = 0.12, line = 3, cex = 0.8)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
PNG <- TRUE
if(PNG) png("LexisSpain.png", widht = 8.5, height = 7, units = "in", res = 300)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
PNG <- TRUE
if(PNG) png("LexisSpain.png", width = 8.5, height = 7, units = "in", res = 300)
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database, https://mortality.org/", side = 1, at = 0.12, line = 3, cex = 0.8)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
PNG <- TRUE
if(PNG) png("LexisSpain.png", width = 8.5, height = 7, units = "in", res = 300)
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database, https://mortality.org/", side = 1, at = 0.12, line = 3, cex = 0.8)
if(PNG) dev.off()
# si volguessim canviar la paleta de colors
colPaleta <- viridis(n = 10, option = "plasma")
# a image() hauríem d'afegir: col = colPaleta
PNG <- TRUE
if(PNG) png("LexisSpain.png", width = 8.5, height = 7, units = "in", res = 300)
par(las = 1, mar = c(4,4,3,1))
# per a que les etiquetes dels eixos estiguin en horitzontal, i per a que es veguin totes les eqtiquetes dels eixos
# Cal transposar-ho, que sinó surt al revés el gràfic. Treiem els eixos logarítmics per posar els nostres
image(t(log(dat1)), axes = FALSE, xlab = "Any", ylab = "Edat", main = "Taxes específiques de mortalitat, Espanya, 1910-2020")
axis(1, at = seq(0, 1, length.out = 12), labels = seq(1910, 2020, 10), cex = 0.9)
axis(2, at = seq(0, 1, length.out = 11), labels = seq(0, 100, 10), cex = 0.9)
mtext(text = "Font: Human Mortality Database, https://mortality.org/", side = 1, at = 0.12, line = 3, cex = 0.8)
if(PNG) dev.off()
setwd("~/Downloads/zalando/zalando/sweatshirt")
# Directorios de las carpetas
carpetas <- c("~/Downloads/zalando/zalando/sweatshirt", "~/Downloads/zalando/zalando/sweatshirt-female", "~/Downloads/zalando/zalando/hoodies", "~/Downloads/zalando/zalando/hoodies-female", "~/Downloads/zalando/zalando/shirt", "~/Downloads/zalando/zalando/longsleeve")
# Función para seleccionar fotos de acuerdo con los pesos
seleccionar_fotos <- function(carpetas, total_fotos = 100) {
# Contar el número de fotos en cada carpeta
fotos_por_carpeta <- sapply(carpetas, function(carpeta) length(list.files(carpeta)))
# Calcular los pesos
total_fotos_disponibles <- sum(fotos_por_carpeta)
pesos <- fotos_por_carpeta / total_fotos_disponibles
# Seleccionar fotos de acuerdo con los pesos
fotos_seleccionadas <- c()
for (i in 1:length(carpetas)) {
fotos_de_carpeta <- list.files(carpetas[i])
cantidad_a_seleccionar <- round(pesos[i] * total_fotos)
# Seleccionar aleatoriamente las fotos de esta carpeta
fotos_seleccionadas <- c(fotos_seleccionadas, sample(fotos_de_carpeta, cantidad_a_seleccionar))
}
# Si hay menos fotos de las que necesitamos (por redondeo), completar con más fotos aleatorias
if (length(fotos_seleccionadas) < total_fotos) {
faltantes <- total_fotos - length(fotos_seleccionadas)
todas_las_fotos <- unlist(lapply(carpetas, function(carpeta) list.files(carpeta)))
fotos_seleccionadas <- c(fotos_seleccionadas, sample(todas_las_fotos, faltantes))
}
return(fotos_seleccionadas)
}
# Directorios de las carpetas
carpetas <- c("~/Downloads/zalando/zalando/sweatshirt", "~/Downloads/zalando/zalando/sweatshirt-female", "~/Downloads/zalando/zalando/hoodies", "~/Downloads/zalando/zalando/hoodies-female", "~/Downloads/zalando/zalando/shirt", "~/Downloads/zalando/zalando/longsleeve")
# Selección de las 100 fotos
fotos_seleccionadas <- seleccionar_fotos(carpetas)
print(fotos_seleccionadas)
# Función para seleccionar fotos de acuerdo con los pesos
seleccionar_fotos <- function(carpetas, total_fotos = 100) {
# Contar el número de fotos en cada carpeta
fotos_por_carpeta <- sapply(carpetas, function(carpeta) length(list.files(carpeta)))
# Calcular los pesos
total_fotos_disponibles <- sum(fotos_por_carpeta)
pesos <- fotos_por_carpeta / total_fotos_disponibles
# Seleccionar fotos de acuerdo con los pesos
fotos_seleccionadas <- c()
for (i in 1:length(carpetas)) {
fotos_de_carpeta <- list.files(carpetas[i])
cantidad_a_seleccionar <- round(pesos[i] * total_fotos)
# Seleccionar aleatoriamente las fotos de esta carpeta
fotos_seleccionadas <- c(fotos_seleccionadas, sample(fotos_de_carpeta, cantidad_a_seleccionar))
}
# Si hay menos fotos de las que necesitamos (por redondeo), completar con más fotos aleatorias
if (length(fotos_seleccionadas) < total_fotos) {
faltantes <- total_fotos - length(fotos_seleccionadas)
todas_las_fotos <- unlist(lapply(carpetas, function(carpeta) list.files(carpeta)))
fotos_seleccionadas <- c(fotos_seleccionadas, sample(todas_las_fotos, faltantes))
}
return(fotos_seleccionadas)
}
# Función para mover las fotos seleccionadas a una nueva carpeta
mover_fotos <- function(fotos_seleccionadas, carpetas, carpeta_destino) {
# Crear la carpeta de destino si no existe
if (!dir.exists(carpeta_destino)) {
dir.create(carpeta_destino)
}
# Mover cada foto seleccionada a la nueva carpeta
for (foto in fotos_seleccionadas) {
# Buscar la foto en las carpetas de origen
for (carpeta in carpetas) {
if (foto %in% list.files(carpeta)) {
# Mover la foto
file.copy(file.path(carpeta, foto), file.path(carpeta_destino, foto), overwrite = TRUE)
break
}
}
}
}
setwd("~/Desktop/subset_100_images")
# Directorios de las carpetas
carpetas <- c("~/Downloads/zalando/zalando/sweatshirt", "~/Downloads/zalando/zalando/sweatshirt-female", "~/Downloads/zalando/zalando/hoodies", "~/Downloads/zalando/zalando/hoodies-female", "~/Downloads/zalando/zalando/shirt", "~/Downloads/zalando/zalando/longsleeve")
# Selección de las 100 fotos
fotos_seleccionadas <- seleccionar_fotos(carpetas)
# Ruta de la nueva carpeta donde se guardarán las fotos seleccionadas
carpeta_destino <- "~/Desktop/subset_100_images"
# Mover las fotos seleccionadas a la nueva carpeta
mover_fotos(fotos_seleccionadas, carpetas, carpeta_destino)
print("Fotos seleccionadas y movidas con éxito.")
